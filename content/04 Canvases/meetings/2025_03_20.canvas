{
	"nodes":[
		{"id":"d1e23525fa2a8dcf","type":"text","text":"\\[Book] **Front-end development handbook** (2019) https://frontendmasters.com/guides/front-end-handbook/2019/","x":-4500,"y":140,"width":420,"height":194},
		{"id":"3349bb1d2318ee15","type":"text","text":"**Barriers in Front-End Web Development** [[(Samudio, LaToza, 2022)]]\n- posts examined on Stack Overflow using to assess common issues in ==what the authors think is the front-end development context==","x":-4500,"y":380,"width":420,"height":280},
		{"id":"d3d8a095b99a9142","type":"text","text":"### ==No clear definition of front-end security==\n#### Are these issues due to low front-end security or to server-side failure?","x":-4380,"y":-860,"width":631,"height":180},
		{"id":"43f5d3894768b88d","type":"text","text":"# RQ1. What web front-end vulnerabilities are more relevant?","x":-4380,"y":-1080,"width":631,"height":167},
		{"id":"ba5802e2b8e96fc0","type":"text","text":"**Comparison and Analysis of Popular Frontend Frameworks and Libraries [[(Kaur, Tiwari, 2023)]]**","x":-4500,"y":730,"width":420,"height":150},
		{"id":"4fffe7fd014b7dee","type":"text","text":"# Hybrid front-end attack","x":-3841,"y":1930,"width":487,"height":80},
		{"id":"0a513a76f2085570","type":"text","text":"Metadata manipulation\n- cookies theft\n- [[session hijacking]]","x":-4420,"y":-580,"width":337,"height":220},
		{"id":"46bf7d44180ce4d2","type":"text","text":"URL manipulation\n- [[forced browsing]]\n- [[IDOR (Insecure Direct Object Reference)]]\n","x":-4064,"y":-578,"width":355,"height":218},
		{"id":"c2da02b1a1d2ce74","type":"text","text":"# Pure front-end attack","x":-4644,"y":1930,"width":436,"height":80},
		{"id":"c6417e9d23b4eccf","type":"text","text":"\n## If the attack does not need the server to be carried out, *then* it must be a pure front-end attack. \n\n## In all other cases, front-end is just a *phase* of a web server attack\n","x":-4380,"y":1520,"width":719,"height":260,"color":"5"},
		{"id":"3db73b0ba1828603","type":"text","text":"## Theoretical reasons","x":-4306,"y":4291,"width":320,"height":116},
		{"id":"7f02614d578c8912","type":"text","text":"## Examples\n\n- [[GEMs (GUI Element Misuse)]] and [[BFT (business flow tampering)]]\n- [[prototype pollution]] (front-end)\n- [[DOM clobbering]]\n- DOM-based [[XSS (cross site scripting)]]\n- [[ReDos (Regular Expression Denial of Service)]]\n- [[clickjacking]]\n- [[tabnabbing]]\n- [[Web Storage API (localStorage, sessionStorage)]] security\n- [[cross-domain policies]] misconfiguration (front-end)\n- [[service worker]] exploitation\n- [[C2C (client-to-client) communication]] with `PostMessage` API\n","x":-4746,"y":2560,"width":640,"height":560},
		{"id":"569f9f5935d87ec1","type":"text","text":"## RQ 2 \n## What exactly are the responsibilities of the front end software in an attack that eventually ==target the server==?\n\n## How does the front-end ==contribute to the defense== of an attack to a web server?","x":-3913,"y":2090,"width":632,"height":390},
		{"id":"64b21cf9dec536c5","type":"text","text":"## RQ 1\n\n## In which scenarios it is possible to carry out an attack on the web front-end ==without the server being involved==?\n\n## What is the role of web front-end software in an attack that does ==not involve a web server==?","x":-4746,"y":2090,"width":640,"height":390},
		{"id":"092cddc14827cc9f","type":"text","text":"## Examples\n\n- [[XSS (cross site scripting)]]\n- [[SQLIA (SQL injection attack)]]\n- [[EAR (Execution After Redirect)]]\n- [[directory traversal (path traversal)]]\n- [[CSRF (cross-site request forgery)]]\n- [[cross-domain policies]] misconfiguration (full-stack)\n- [[IDOR (Insecure Direct Object Reference)]]","x":-3913,"y":2560,"width":632,"height":560},
		{"id":"6ab1bb100f742959","type":"text","text":"Front-end web development, as the ==practice of producing HTML, CSS and JavaScript== ","x":-4000,"y":161,"width":320,"height":152},
		{"id":"83e1ead12f3740ea","type":"text","text":"front-end has the responsibility of sending the right data to the a web server","x":-4000,"y":438,"width":320,"height":164},
		{"id":"8478cae1b35089de","type":"text","text":"The **frontend** is concerned with ==displaying data==, whereas the backend is in charge of ==storing data, processing requests, and managing communication== ","x":-4000,"y":669,"width":320,"height":272},
		{"id":"3fdc0d516adb6f63","type":"text","text":"### ==Help defining domains and responsibilities==: often client and server software are developed by different teams. Clarifying the role of each side in a security context could drive better mitigation solutions\n","x":-3898,"y":4082,"width":765,"height":217},
		{"id":"f6d29741ef16d3fd","type":"text","text":"### ==Identifying root causes of a security issue==: by understanding whether some phases of a web attack may not be essential and by identify exactly where the vulnerability is and whose \"fault\" is","x":-3898,"y":4357,"width":765,"height":213},
		{"id":"65e933fc7bec68b4","type":"text","text":"### ==No need to discard papers that seems not to be focused on the front-end== :every form of attack could potentially be classified as either a *pure front-end attack* and an *hybrid front-end attack*","x":-3898,"y":3720,"width":765,"height":256},
		{"id":"c6d1280618d7dbdf","type":"text","text":"## Practical reasons","x":-4306,"y":3800,"width":320,"height":97},
		{"id":"2c5b9ffd5f9f0139","type":"text","text":"# Why is this relevant?","x":-4840,"y":4032,"width":408,"height":100},
		{"id":"80bc19ae379c92db","type":"text","text":"### History of Adobe Flash\n\n[[Adobe Flash]] (1990-2021)\n- used by most web application in 2010-2015\n- many vulnerabilities: [[RCE (Remote Code Execution)]] , [[drive-by download]]","x":-1680,"y":-955,"width":380,"height":350},
		{"id":"24ee6ae79f2e6632","type":"text","text":"### Deprecated mitigation techniques against XSS\n\nX-XSS-Protection HTTP, implemented by Microsoft ","x":-1240,"y":-955,"width":420,"height":350},
		{"id":"f54369e697729d9d","type":"text","text":"### Deprecated web storage\n\n**[Web SQL](https://developer.chrome.com/blog/deprecating-web-sql)**:  allows to store data in a structured manner on the user's computer (internally based on the SQLite database engine).\n- introduced in 2009 and abandoned 2010","x":-760,"y":-955,"width":460,"height":350},
		{"id":"a7111022798a0a81","type":"text","text":"## Why did these attempts fail? What can we learn from it?","x":-1430,"y":-525,"width":900,"height":100},
		{"id":"c7127fb08f496c3f","x":-1427,"y":-1680,"width":795,"height":80,"type":"text","text":"# Observations on the first +16 papers"},
		{"id":"73b59bc0fcedd02c","type":"text","text":"# About tools or vulnerabilities *Life cycle* (RQ3)\n","x":-1490,"y":-1080,"width":897,"height":80},
		{"id":"930155de0aed68e5","x":-1430,"y":-1560,"width":795,"height":320,"type":"text","text":"- Many papers focus on HTTP traffic analysis. The role of the front-end in the communication is often not relevant\n- Tools for code synthesis (WAVES): code can be synthesized for both server and client if the same logic has to be implemented (e.g., double input validation)\n- Web client local storage (IndexedDB) it is not 100% secure, even in private mode\n- \"Private\" web applications (in local networks) often are less secure than public web application "},
		{"id":"57cd65944a2802bd","x":-3180,"y":1650,"width":301,"height":100,"type":"text","text":"distinguish browser bugs"}
	],
	"edges":[
		{"id":"af9a9151cd26b795","fromNode":"d3d8a095b99a9142","fromSide":"bottom","toNode":"0a513a76f2085570","toSide":"top"},
		{"id":"0ef32655a584cd37","fromNode":"d3d8a095b99a9142","fromSide":"bottom","toNode":"46bf7d44180ce4d2","toSide":"top"},
		{"id":"4043ea73a8b322dc","fromNode":"c6417e9d23b4eccf","fromSide":"bottom","toNode":"c2da02b1a1d2ce74","toSide":"top"},
		{"id":"1b6f02cfcc69a42f","fromNode":"c6417e9d23b4eccf","fromSide":"bottom","toNode":"4fffe7fd014b7dee","toSide":"top"},
		{"id":"dac995cce38c2f3d","fromNode":"2c5b9ffd5f9f0139","fromSide":"right","toNode":"c6d1280618d7dbdf","toSide":"left"},
		{"id":"0b1d23b00a83310b","fromNode":"2c5b9ffd5f9f0139","fromSide":"right","toNode":"3db73b0ba1828603","toSide":"left"},
		{"id":"c33f38f84ab09db6","fromNode":"3db73b0ba1828603","fromSide":"right","toNode":"3fdc0d516adb6f63","toSide":"left"},
		{"id":"246f3f7f7b5c1beb","fromNode":"c6d1280618d7dbdf","fromSide":"right","toNode":"65e933fc7bec68b4","toSide":"left"},
		{"id":"a93c286d4116fa45","fromNode":"c2da02b1a1d2ce74","fromSide":"bottom","toNode":"64b21cf9dec536c5","toSide":"top"},
		{"id":"494fc5f82ef023f5","fromNode":"4fffe7fd014b7dee","fromSide":"bottom","toNode":"569f9f5935d87ec1","toSide":"top"},
		{"id":"52bcee6eedba6646","fromNode":"d1e23525fa2a8dcf","fromSide":"right","toNode":"6ab1bb100f742959","toSide":"left"},
		{"id":"a391f444a24e5af0","fromNode":"ba5802e2b8e96fc0","fromSide":"right","toNode":"8478cae1b35089de","toSide":"left"},
		{"id":"12509b5f6b597464","fromNode":"3db73b0ba1828603","fromSide":"right","toNode":"f6d29741ef16d3fd","toSide":"left"},
		{"id":"0efd9c5024146e5a","fromNode":"3349bb1d2318ee15","fromSide":"right","toNode":"83e1ead12f3740ea","toSide":"left"},
		{"id":"13364db287435d1b","fromNode":"64b21cf9dec536c5","fromSide":"bottom","toNode":"7f02614d578c8912","toSide":"top"},
		{"id":"2d8bcf8e08fb5c1c","fromNode":"569f9f5935d87ec1","fromSide":"bottom","toNode":"092cddc14827cc9f","toSide":"top"}
	]
}