{
	"nodes":[
		{"id":"2daa04955591aee5","type":"text","text":"## input validation","x":-1138,"y":-160,"width":280,"height":60},
		{"id":"0253f78ebdee5dee","type":"text","text":"# Graphical User Interface vulnerabilities","x":-280,"y":-400,"width":520,"height":120,"color":"4"},
		{"id":"a2e27d8522670049","type":"text","text":"## presentation layer","x":891,"y":-189,"width":340,"height":60},
		{"id":"1a8f1a12c4223ea8","type":"text","text":"### [[GEMs (GUI Element Misuse)]]","x":320,"y":22,"width":714,"height":69},
		{"id":"6e30b31cde9c16a8","type":"text","text":"## Features\n\nGEMS (GUI Element Misuse) are a novel class of access control vulnerabilities in GUI:\n- GEMs arise when developers rely on and misuse UI elements attributes to implement access control checks\n- GEMs can be used as a basis for privilege escalation exploits and general access control bypass\n- GEMs can be exploited by non-technical users\n\nGUI is not a reliable mechanism to enforce access control decisions: widgets can often be modified from outside of the application to by-pass client-side validations or checks\n\n## Types\n\nDifferent GEMs can be distinguished based on their consequences:\n- ==Unauthorized information disclosure==: the GEM leads to protected resources\n- ==Unauthorized information modification==. the GEM leads to admin privileges. Depending on the impact of the GEMs:\n\t- *transient*: modification are not permanent and last as long as the user's session\n\t- *persistent*: modification are permanent and saved by the system\n- ==Unauthorized callback execution==: the GEM leads to restricted functionalities\n\n## Detection and mitigation\n\n- Automatic detection through GUI ripping and [[EFG (event flow graph)]] exploration under different privileges\n## Risks and issues\n\n- privilege escalation issues","x":320,"y":174,"width":714,"height":1239},
		{"id":"7c2be48738ce7884","type":"text","text":"### canvas vulnerabilities\n","x":1126,"y":23,"width":735,"height":78},
		{"id":"4d13bcc46fe6f5cc","x":1126,"y":174,"width":735,"height":1239,"type":"text","text":"## Features\n\nThe DOM canvas element is widely used to develop web applications rich in data visualizations and animations or web games.\n\n## Risks and issues\n- ==Visual issues==: problems in the presentation of objects on the bitmap\n- ==Integration issues==: issues related the connection of the \\<canvas> to the other parts of a web application\n- ==Web architecture issues==: issues related to different behavior across browsers and cross-origin resource sharing\n- ==User interaction issues==: issues related to DOM events that are triggered from the \\<canvas> element\n- ==Performance issues==: issues related to inefficient memory usage (rendering too often, memory not emptied correctly)"},
		{"id":"feb344a3b97dbca0","type":"text","text":"### [[buffer overflow]]","x":-569,"y":38,"width":517,"height":68},
		{"id":"548d37f5fcb47b5b","type":"text","text":"## Features\n\n","x":-569,"y":189,"width":517,"height":1239},
		{"id":"26decb87164bdb5e","type":"text","text":"### [[XSS (cross site scripting)]]","x":-2012,"y":38,"width":625,"height":63},
		{"id":"3706c68da0df9e2e","type":"text","text":"### [[ReDoS (Regular Expression Denial of Service)]]","x":-1298,"y":38,"width":600,"height":68},
		{"id":"86ffa284c8f6dbde","type":"text","text":"### Features\n- It is a type of [[DOS (Denial of Service)]] attack, that exploits the fact that some [[RegEx (Regular Expression)]] implementations are based on [[NFA (Nondeterministic Finite Automation)]] algorithms that try every possible combinatoric path in order to establish a result.\n- A [[evil RegEx (Regular Expression)]] can be exploited to cause a program to hang for a very long time, due to high request of computing resources\n\n### Types\n\n - **Reflected**: an attacker keeps sending malicious requests to the vulnerable web server. Each request may be different in contents and origins (e.g., different IP addresses are used and different input are used)\n - **Stored**: an attacker stores malicious input to the vulnerable web server (e.g., a comment in a blog). The malicious content is fetched and matched against a vulnerable RegEx (e.g., there is an illegal-content detector). Since the malicious input is stored, each new user of the blog could potentially read that malicious input, which is public, and each time a new ReDoS attack could be triggered (depending on how the illegal-content detector is implemented, it could make sense to filter and validate content *continuously* and not just at the publication time - e.g. new tags are added)","x":-1342,"y":189,"width":687,"height":1239},
		{"id":"3f93b749c747e2f8","type":"text","text":"### Features\n\n- Among the most common and most serious security problems affecting web applications\n- They are injection problems that enable malicious scripts to be injected into trusted websites\n- Most of the time it is a result of a failed tentative to validate the user input\n### Types\n\n- **Reflected**: Reflected XSS is the simplest variety of cross-site scripting. It arises when an application receives data in an HTTP request and includes that data within the response in an unsafe way.\n - **Stored**: malicious inputs are stored in databases, message forums, comments fields of the attacked server. The malicious code is executed by visiting users. This is the most dangerous XSS attack\n - **DOM-based**: executed on the client-side. Attackers are able to exploit client-side logic that process data from untrusted sources-end to collect sensitive information from the users. ==It is the  studied type of XSS==\n### Detection and mitigation\n\n- Static analysis:  [[static taint analysis]], [[symbolic execution]], string analysis, [[GA (genetic algorithm)]], [[program slicing]], data flow analysis, [[precise alias analysis]]\n- Dynamic analysis: [[black-box testing]]. [[taint tracking]], flow analysis, monitoring, filtering\n### Risks and issues\n\n- Steal sensitive information\n- Hijack a user's account\n- Manipulate the web content\n- Cause a [[DOS (Denial of Service)]]","x":-2012,"y":172,"width":625,"height":1256}
	],
	"edges":[
		{"id":"ec73da95e93d03f5","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"26decb87164bdb5e","toSide":"top"},
		{"id":"a573d65951a3bdd6","fromNode":"0253f78ebdee5dee","fromSide":"bottom","toNode":"2daa04955591aee5","toSide":"top"},
		{"id":"19d66f7825639492","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"3706c68da0df9e2e","toSide":"top"},
		{"id":"c0718fb43afede49","fromNode":"0253f78ebdee5dee","fromSide":"bottom","toNode":"a2e27d8522670049","toSide":"top"},
		{"id":"b19aa2f764dd9280","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"feb344a3b97dbca0","toSide":"top"},
		{"id":"bfcff323f1b2425d","fromNode":"a2e27d8522670049","fromSide":"bottom","toNode":"7c2be48738ce7884","toSide":"top"},
		{"id":"bac0ac21c6710364","fromNode":"26decb87164bdb5e","fromSide":"bottom","toNode":"3f93b749c747e2f8","toSide":"top"},
		{"id":"1c168ee868d6e80e","fromNode":"3706c68da0df9e2e","fromSide":"bottom","toNode":"86ffa284c8f6dbde","toSide":"top"},
		{"id":"f34609ee1a99cd98","fromNode":"feb344a3b97dbca0","fromSide":"bottom","toNode":"548d37f5fcb47b5b","toSide":"top"},
		{"id":"7126654a2177e823","fromNode":"a2e27d8522670049","fromSide":"bottom","toNode":"1a8f1a12c4223ea8","toSide":"top"},
		{"id":"dfad562ddd8a9754","fromNode":"1a8f1a12c4223ea8","fromSide":"bottom","toNode":"6e30b31cde9c16a8","toSide":"top"},
		{"id":"8491f718e22154ef","fromNode":"7c2be48738ce7884","fromSide":"bottom","toNode":"4d13bcc46fe6f5cc","toSide":"top"}
	]
}