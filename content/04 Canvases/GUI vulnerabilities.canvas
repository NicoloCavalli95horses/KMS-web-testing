{
	"nodes":[
		{"id":"0253f78ebdee5dee","type":"text","text":"# Graphical User Interface vulnerabilities\n\n[[GUI vulnerabilities comparisons]]","x":-460,"y":-560,"width":520,"height":200,"color":"4"},
		{"id":"2daa04955591aee5","type":"text","text":"## input validation","x":-1180,"y":-220,"width":280,"height":60},
		{"id":"26decb87164bdb5e","type":"text","text":"[[XSS (cross site scripting)]]","x":-1940,"y":30,"width":580,"height":63},
		{"id":"6e30b31cde9c16a8","type":"text","text":"## logic flaws/state synchronization","x":60,"y":-160,"width":480,"height":58},
		{"id":"d2098170220ba654","type":"text","text":"Visual consistency","x":740,"y":58,"width":250,"height":60},
		{"id":"a2e27d8522670049","type":"text","text":"## presentation layer","x":1030,"y":-162,"width":340,"height":60},
		{"id":"7c2be48738ce7884","type":"text","text":"canvas vulnerabilities\n\n![[taxonomy_canvas_issues.png]]","x":1030,"y":61,"width":640,"height":300},
		{"id":"1a8f1a12c4223ea8","type":"text","text":"- [[clickjacking]]\n- race conditions in UI\n- UI state inconsistency\n- logical flaws\n- [[GEMs (GUI Element Misuse)]]","x":89,"y":93,"width":422,"height":210},
		{"id":"86ffa284c8f6dbde","type":"text","text":"### Features\n- It is a type of [[DOS (Denial of Service)]] attack, that exploits the fact that some [[RegEx (Regular Expression)]] implementations are based on [[NFA (Nondeterministic Finite Automation)]] algorithms that try every possible combinatoric path in order to establish a result.\n- A [[evil RegEx (Regular Expression)]] can be exploited to cause a program to hang for a very long time, due to high request of computing resources\n\n### Types\n\n - **Reflected**: an attacker keeps sending malicious requests to the vulnerable web server. Each request may be different in contents and origins (e.g., different IP addresses are used and different input are used)\n - **Stored**: an attacker stores malicious input to the vulnerable web server (e.g., a comment in a blog). The malicious content is fetched and matched against a vulnerable RegEx (e.g., there is an illegal-content detector). Since the malicious input is stored, each new user of the blog could potentially read that malicious input, which is public, and each time a new ReDoS attack could be triggered (depending on how the illegal-content detector is implemented, it could make sense to filter and validate content *continuously* and not just at the publication time - e.g. new tags are added)","x":-1318,"y":181,"width":638,"height":1128},
		{"id":"3f93b749c747e2f8","type":"text","text":"### Features\n\n- Among the most common and most serious security problems affecting web applications\n- They are injection problems that enable malicious scripts to be injected into trusted websites\n- Most of the time it is a result of a failed tentative to validate the user input\n### Types\n\n- **Reflected**: Reflected XSS is the simplest variety of cross-site scripting. It arises when an application receives data in an HTTP request and includes that data within the response in an unsafe way.\n - **Stored**: malicious inputs are stored in databases, message forums, comments fields of the attacked server. The malicious code is executed by visiting users. This is the most dangerous XSS attack\n - **DOM-based**: executed on the client-side. Attackers are able to exploit client-side logic that process data from untrusted sources-end to collect sensitive information from the users. ==It is the  studied type of XSS==\n### Detection and mitigation\n\n- Static analysis:  [[static taint analysis]], [[symbolic execution]], string analysis, [[GA (genetic algorithm)]], [[program slicing]], data flow analysis, [[precise alias analysis]]\n- Dynamic analysis: [[black-box testing]]. [[taint tracking]], flow analysis, monitoring, filtering\n### Risks\n\n- Steal sensitive information\n- Hijack a user's account\n- Manipulate the web content\n- Cause a [[DOS (Denial of Service)]]","x":-1940,"y":164,"width":580,"height":1145},
		{"id":"3706c68da0df9e2e","type":"text","text":"[[ReDoS (Regular Expression Denial of Service)]]","x":-1277,"y":30,"width":557,"height":68},
		{"id":"feb344a3b97dbca0","type":"text","text":"[[buffer overflow]]","x":-600,"y":30,"width":480,"height":68}
	],
	"edges":[
		{"id":"ec73da95e93d03f5","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"26decb87164bdb5e","toSide":"top"},
		{"id":"a573d65951a3bdd6","fromNode":"0253f78ebdee5dee","fromSide":"bottom","toNode":"2daa04955591aee5","toSide":"top"},
		{"id":"19d66f7825639492","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"3706c68da0df9e2e","toSide":"top"},
		{"id":"c0718fb43afede49","fromNode":"0253f78ebdee5dee","fromSide":"bottom","toNode":"a2e27d8522670049","toSide":"top"},
		{"id":"b19aa2f764dd9280","fromNode":"2daa04955591aee5","fromSide":"bottom","toNode":"feb344a3b97dbca0","toSide":"top"},
		{"id":"bfcff323f1b2425d","fromNode":"a2e27d8522670049","fromSide":"bottom","toNode":"7c2be48738ce7884","toSide":"top"},
		{"id":"40adc9a8f571494f","fromNode":"a2e27d8522670049","fromSide":"bottom","toNode":"d2098170220ba654","toSide":"top"},
		{"id":"ba942094c899f2df","fromNode":"0253f78ebdee5dee","fromSide":"bottom","toNode":"6e30b31cde9c16a8","toSide":"top"},
		{"id":"836fe44fb46cc1f9","fromNode":"6e30b31cde9c16a8","fromSide":"bottom","toNode":"1a8f1a12c4223ea8","toSide":"top"},
		{"id":"bac0ac21c6710364","fromNode":"26decb87164bdb5e","fromSide":"bottom","toNode":"3f93b749c747e2f8","toSide":"top"},
		{"id":"1c168ee868d6e80e","fromNode":"3706c68da0df9e2e","fromSide":"bottom","toNode":"86ffa284c8f6dbde","toSide":"top"}
	]
}