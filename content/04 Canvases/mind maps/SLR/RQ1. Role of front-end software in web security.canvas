{
  "edges": [
  ],
  "nodes": [
    {
      "height": 820,
      "id": "2ee736b5c612abc2",
      "styleAttributes": {
        "border": "invisible"
      },
      "text": "\n| Attack                                | Description                                                                                                                                                     | Victim              | Front-End Responsibility | Rationale                                                                                 | References |\n| ------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ------------------------ | ----------------------------------------------------------------------------------------- | ---------- |\n| [[clickjacking]]                      | User interactions (clicks, key presses, drag events, etc) are intercepted to manipulate invisible content                                                       | user                | Very high                | user interface, user pointer, events                                                      | ...        |\n| [[tabnabbing]]                        | [[top-level navigation]] (URL address)<br>is replaced from tab A to tab B,<br>or vice versa (reverse tabnabbing)<br>tricking the user into providing credential | user                | Very high                | user interface, browser tabs                                                              | ...        |\n| [[CSRF (cross-site request forgery)]] | Cross-site malicious HTTP requests are executed taking advantage of cached authentication information                                                           | user                | Very high                | Authentication information cached by browser ([[cookie]])                                 | ...        |\n| [[BFT (business flow tampering)]]     | BFT exploits defects that permit to circumvent the expected functionality of an application                                                                     | user/business owner | High                     | Front-end business logic is tampered. Flaws at server-side contribute to the exploitation | ...        |\n| [[EAR (Execution After Redirect)]]    | unintended server-side code that is executed after a redirect call                                                                                              | business owner      | Low                      | Front-end helps triggering the redirect functions                                         | ...        |\n| HTTP requests tampering               | HTTP requests are manipulated to bypass weak authorization checks at the server-side                                                                            | business owner      | Low                      | Front-end helps API discovery and manipulation                                            | ...        |\n",
      "type": "text",
      "width": 1380,
      "x": -660,
      "y": 140
    },
    {
      "height": 60,
      "id": "a8f0d71a11a89a5b",
      "styleAttributes": {
        "border": "invisible",
        "textAlign": "center"
      },
      "text": "# RQ1. Role of front-end software in web security ",
      "type": "text",
      "width": 960,
      "x": -450,
      "y": 40
    }
  ]
}